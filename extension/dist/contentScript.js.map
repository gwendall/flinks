{"version":3,"file":"contentScript.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://my-chrome-extension/./src/contentScript.ts"],"sourcesContent":["\"use strict\";\nconst CORS_PROXY = 'https://punkcam-cors-anywhere-99a09af4e7c4.herokuapp.com/';\nconst PUNKCAM_LINK = \"https://labs.punk.cam/embed?url=https%3A%2F%2Fpunkmaker.xyz%2Fapi%2Fog%3Fp%3D002-061-048-050%26mode%3Drender%26background%3D0\";\nconst RENDERING_DOMAIN = \"https://flinks.gg\";\nwindow.addEventListener('message', function (event) {\n    if (event.data.type === 'openNewFlinkUrl') {\n        window.open(event.data.url, '_blank');\n    }\n});\nfunction buildIframe(src) {\n    const iframe = document.createElement('iframe');\n    iframe.classList.add('flinks-iframe');\n    iframe.src = src;\n    iframe.allow = 'camera;microphone';\n    // @ts-ignore\n    iframe.allowusermedia = 'true';\n    iframe.addEventListener('load', () => {\n        iframe.style.opacity = '1'; // Fade in\n    });\n    const aspectRatioContainer = document.createElement('div');\n    aspectRatioContainer.classList.add('flinks-aspect-ratio-container');\n    const loadingContainer = document.createElement('div');\n    loadingContainer.classList.add('flinks-loading-container');\n    loadingContainer.textContent = 'Loading frame...';\n    aspectRatioContainer.appendChild(loadingContainer);\n    aspectRatioContainer.appendChild(iframe);\n    return aspectRatioContainer;\n}\nfunction extractTweetLinks(tweet) {\n    // 1. Fetch links within text\n    const tweetText = tweet.querySelector('[data-testid=\"tweetText\"]');\n    const tweetTextLinks = Array.from((tweetText === null || tweetText === void 0 ? void 0 : tweetText.querySelectorAll('a[href]')) || [])\n        .map((el) => el.getAttribute('href'))\n        .filter((link) => link === null || link === void 0 ? void 0 : link.startsWith(\"https://\"))\n        .filter(Boolean) || [];\n    // 2. Fetch links within cards\n    const tweetCardsLinks = Array.from(tweet.querySelectorAll('[data-testid=\"card.wrapper\"]'))\n        .map(el => { var _a; return (_a = el.querySelector('a[href]')) === null || _a === void 0 ? void 0 : _a.getAttribute('href'); })\n        .filter((link) => link === null || link === void 0 ? void 0 : link.startsWith(\"https://\"))\n        .filter(Boolean) || [];\n    return [...new Set([...tweetTextLinks, ...tweetCardsLinks])].filter(Boolean);\n}\nfunction findFirstParentWithAttribute(element, attribute) {\n    while (element) {\n        if (element.hasAttribute(attribute)) {\n            return element;\n        }\n        element = element.parentElement;\n    }\n    return null; // Return null if no parent with the attribute is found\n}\nconst processedTweetTexts = new Set();\nfunction replaceDOMElements() {\n    const tweets = document.querySelectorAll('[data-testid=\"tweet\"]');\n    tweets.forEach((tweet) => {\n        const tweetText = tweet.querySelector('[data-testid=\"tweetText\"]');\n        if (tweetText && !processedTweetTexts.has(tweetText)) {\n            processedTweetTexts.add(tweetText);\n            tweetText.style.overflowX = 'visible';\n            tweetText.style.overflowY = 'visible';\n            const tweetLinks = extractTweetLinks(tweet);\n            tweetLinks.forEach((tweetLink) => {\n                fetch(RENDERING_DOMAIN + \"/api/frames?url=\" + encodeURIComponent(tweetLink))\n                    .then((response) => response.json())\n                    .then((response) => {\n                    var _a;\n                    if (response.status === 'success' && response.frame) {\n                        const iframe = buildIframe(RENDERING_DOMAIN + \"/frames?url=\" + encodeURIComponent(tweetLink));\n                        (_a = tweetText === null || tweetText === void 0 ? void 0 : tweetText.parentElement) === null || _a === void 0 ? void 0 : _a.appendChild(iframe);\n                    }\n                });\n            });\n            // 3. Remove photos and cards\n            /*\n            if (tweetLinks.length > 0) {\n                const tweetCards = tweet.querySelectorAll('[data-testid=\"card.wrapper\"]');\n                tweetCards.forEach(tweetCard => {\n                    tweetCard.remove?.();\n                });\n                const tweetPhotos = tweet.querySelectorAll('[data-testid=\"tweetPhoto\"]');\n                tweetPhotos.forEach(tweetPhoto => {\n                    const photoContainer = findFirstParentWithAttribute(tweetPhoto as HTMLElement, \"aria-labelledby\");\n                    photoContainer?.remove?.();\n                });\n            }\n            */\n        }\n    });\n}\n// Ensure the function is called on DOMContentLoaded\ndocument.addEventListener('DOMContentLoaded', replaceDOMElements);\n// Also listen to the window load event to handle additional cases\nwindow.addEventListener('load', replaceDOMElements);\n// Observe changes in the DOM and replace elements dynamically\nconst observer = new MutationObserver(replaceDOMElements);\n// Start observing the document body for changes\nobserver.observe(document.body, { childList: true, subtree: true });\n"],"names":[],"sourceRoot":""}