{"version":3,"file":"contentScript.js","mappingsrMA;AACA;AACA;AACA;AACA","sources":["webpack://flinks/./src/contentScript.ts","webpack://flinks/webpack/before-startup","webpack://flinks/webpack/startup","webpack://flinks/webpack/after-startup"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// const WEBAPP_URL = \"https://eminent-pelican-hugely.ngrok-free.app\";\n// const WEBAPP_URL = \"https://flinks.gg\";\nconst WEBAPP_URL = \"https://dev.flinks.gg\";\nwindow.addEventListener('message', function (event) {\n    if (event.data.type === 'openNewFlinkUrl') {\n        if (!confirm('You are about to be redirected to ' + event.data.url)) {\n            return;\n        }\n        window.open(event.data.url, '_blank');\n    }\n    else if (event.data.type === 'flinkMint') {\n        if (!confirm('Minting through Flinks is coming soon. In the meantime, you can mint here: ' + event.data.url)) {\n            return;\n        }\n        window.open(event.data.url, '_blank');\n    }\n    else if (event.data.type === 'flinkTx') {\n        if (!confirm('Transactions through Flinks are coming soon. In the meantime, you can do your transaction here: ' + event.data.url)) {\n            return;\n        }\n        window.open(event.data.url, '_blank');\n    }\n});\nfunction buildIframe(src, frameLink) {\n    console.log(\"Building iframe for: \" + src);\n    const iframe = document.createElement('iframe');\n    iframe.classList.add('flinks-iframe');\n    iframe.setAttribute('data-url', src);\n    iframe.src = src;\n    // iframe.allow = 'camera;microphone';\n    // iframe.allowusermedia = 'true';\n    iframe.addEventListener('load', () => {\n        iframe.style.opacity = '1'; // Fade in\n    });\n    const aspectRatioContainer = document.createElement('div');\n    aspectRatioContainer.classList.add('flinks-aspect-ratio-container');\n    const loadingContainer = document.createElement('div');\n    loadingContainer.classList.add('flinks-loading-container');\n    loadingContainer.textContent = 'Loading frame...';\n    aspectRatioContainer.appendChild(loadingContainer);\n    aspectRatioContainer.appendChild(iframe);\n    const iframeContainer = document.createElement('div');\n    iframeContainer.appendChild(aspectRatioContainer);\n    const iframeLink = document.createElement('a');\n    iframeLink.classList.add('flinks-iframe-link');\n    iframeLink.href = frameLink;\n    iframeLink.target = '_blank';\n    iframeLink.textContent = new URL(frameLink).hostname;\n    iframeContainer.appendChild(iframeLink);\n    return iframeContainer;\n}\nfunction extractTweetLinks(tweet) {\n    // 1. Fetch links within text\n    const tweetText = tweet.querySelector('[data-testid=\"tweetText\"]');\n    const tweetTextLinks = Array.from((tweetText === null || tweetText === void 0 ? void 0 : tweetText.querySelectorAll('a[href]')) || [])\n        .map((el) => el.getAttribute('href'))\n        .filter((link) => link === null || link === void 0 ? void 0 : link.startsWith(\"https://\"))\n        .filter(Boolean) || [];\n    // 2. Fetch links within cards\n    const tweetCardsLinks = Array.from(tweet.querySelectorAll('[data-testid=\"card.wrapper\"]'))\n        .map(el => { var _a; return (_a = el.querySelector('a[href]')) === null || _a === void 0 ? void 0 : _a.getAttribute('href'); })\n        .filter((link) => link === null || link === void 0 ? void 0 : link.startsWith(\"https://\"))\n        .filter(Boolean) || [];\n    return [...new Set([...tweetTextLinks, ...tweetCardsLinks])].filter(Boolean);\n}\nfunction findFirstParentWithAttribute(element, attribute) {\n    while (element) {\n        if (element.hasAttribute(attribute)) {\n            return element;\n        }\n        element = element.parentElement;\n    }\n    return null; // Return null if no parent with the attribute is found\n}\nconst processedTweetTexts = new Set();\nfunction handleTweet(tweet) {\n    // (tweet as HTMLElement).style.backgroundColor = 'red';\n    const tweetText = tweet.querySelector('[data-testid=\"tweetText\"]');\n    // if (!tweetText || processedTweetTexts.has(tweetText)) return;\n    if (!tweetText)\n        return;\n    processedTweetTexts.add(tweetText);\n    tweetText.style.overflowX = 'visible';\n    tweetText.style.overflowY = 'visible';\n    const tweetLinks = extractTweetLinks(tweet);\n    tweetLinks.forEach((tweetLink) => __awaiter(this, void 0, void 0, function* () {\n        var _a, _b, _c, _d, _e, _f;\n        const loadingText = document.createElement('div');\n        loadingText.classList.add('flinks-checking-text');\n        loadingText.textContent = 'Looking for frame...';\n        (_a = tweetText === null || tweetText === void 0 ? void 0 : tweetText.parentElement) === null || _a === void 0 ? void 0 : _a.appendChild(loadingText);\n        const fetchFrameUrl = WEBAPP_URL + \"/api/frames?url=\" + encodeURIComponent(tweetLink);\n        try {\n            console.log('Checking for frame: ' + fetchFrameUrl);\n            const fetchResponse = yield fetch(fetchFrameUrl, {\n                method: 'GET',\n                // mode: 'no-cors',\n                credentials: 'include',\n                // headers: {\n                //     'Content-Type': 'application/json'\n                // },\n            });\n            console.log('Frame response: ', fetchFrameUrl, fetchResponse);\n            const fetchJSON = yield fetchResponse.json();\n            console.log('Frame response JSON: ', fetchJSON);\n            const existingIframe = tweetText === null || tweetText === void 0 ? void 0 : tweetText.querySelector(`iframe.flinks-iframe[data-url=\"${tweetLink}\"]`);\n            if (((_b = fetchJSON.frameData) === null || _b === void 0 ? void 0 : _b.status) === 'success' && ((_c = fetchJSON.frameData) === null || _c === void 0 ? void 0 : _c.frame) && !existingIframe) {\n                const iframe = buildIframe(WEBAPP_URL + \"/frames?url=\" + encodeURIComponent(tweetLink), fetchJSON.url);\n                (_d = tweetText === null || tweetText === void 0 ? void 0 : tweetText.parentElement) === null || _d === void 0 ? void 0 : _d.appendChild(iframe);\n            }\n            const alreadyInjectedText = tweet.querySelector('.flinks-checking-text');\n            if (alreadyInjectedText) {\n                (_e = alreadyInjectedText.remove) === null || _e === void 0 ? void 0 : _e.call(alreadyInjectedText);\n            }\n        }\n        catch (err) {\n            console.error('Frame not found for: ' + fetchFrameUrl, err.message);\n            const alreadyInjectedText = tweet.querySelector('.flinks-checking-text');\n            if (alreadyInjectedText) {\n                (_f = alreadyInjectedText.remove) === null || _f === void 0 ? void 0 : _f.call(alreadyInjectedText);\n            }\n        }\n    }));\n    // 3. Remove photos and cards\n    /*\n    if (tweetLinks.length > 0) {\n        const tweetCards = tweet.querySelectorAll('[data-testid=\"card.wrapper\"]');\n        tweetCards.forEach(tweetCard => {\n            tweetCard.remove?.();\n        });\n        const tweetPhotos = tweet.querySelectorAll('[data-testid=\"tweetPhoto\"]');\n        tweetPhotos.forEach(tweetPhoto => {\n            const photoContainer = findFirstParentWithAttribute(tweetPhoto as HTMLElement, \"aria-labelledby\");\n            photoContainer?.remove?.();\n        });\n    }\n    */\n}\n// function replaceDOMElements() {\n//     console.log('Replacing DOM elements...');\n//     const tweets = document.querySelectorAll('[data-testid=\"tweet\"]');\n//     tweets.forEach((tweet) => {\n//         handleTweet(tweet);\n//     });\n// }\n// // Ensure the function is called on DOMContentLoaded\n// document.addEventListener('DOMContentLoaded', replaceDOMElements);\n// // Observe changes in the DOM and replace elements dynamically\n// const observer = new MutationObserver(replaceDOMElements);\n// // Start observing the document body for changes\n// observer.observe(document.body, { childList: true, subtree: true });\nfunction handleNewTweets(mutationsList) {\n    for (const mutation of mutationsList) {\n        if (mutation.type === 'childList') {\n            mutation.addedNodes.forEach(node => {\n                if (node.nodeType === 1) { // Ensure the added node is an element\n                    const element = node;\n                    if (element.matches('[data-testid=\"tweet\"]') && !element.hasAttribute('data-processed')) {\n                        handleTweet(element);\n                        element.setAttribute('data-processed', 'true');\n                    }\n                    // Check for any tweet elements within the added subtree\n                    element.querySelectorAll('[data-testid=\"tweet\"]:not([data-processed])').forEach(tweetNode => {\n                        handleTweet(tweetNode);\n                        tweetNode.setAttribute('data-processed', 'true');\n                    });\n                    // Handle new card wrapper elements within the document\n                    element.querySelectorAll('[data-testid=\"card.wrapper\"]').forEach(cardNode => {\n                        const parentTweet = cardNode.closest('[data-testid=\"tweet\"]');\n                        if (parentTweet && !parentTweet.hasAttribute('data-processed')) {\n                            handleTweet(parentTweet);\n                            parentTweet.setAttribute('data-processed', 'true');\n                        }\n                    });\n                }\n            });\n        }\n    }\n}\n// Create an observer instance linked to the callback function\nconst observer = new MutationObserver(handleNewTweets);\n// Start observing the document body for added nodes\nobserver.observe(document.body, { childList: true, subtree: true });\n// document.addEventListener('DOMContentLoaded', () => {\n//     document.querySelectorAll('[data-testid=\"tweet\"]').forEach(tweetNode => {\n//         handleTweet(tweetNode);\n//     });\n// });\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/contentScript.ts\"]();\n",""],"names":[],"sourceRoot":""}